/* eslint-disable */
//@ts-nocheck
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: extrabyte.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace com.iamteer.wcf {
    export class Extra extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            properties?: Extra.Property[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
        }
        get properties() {
            return pb_1.Message.getRepeatedWrapperField(this, Extra.Property, 3) as Extra.Property[];
        }
        set properties(value: Extra.Property[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            properties?: ReturnType<typeof Extra.Property.prototype.toObject>[];
        }): Extra {
            const message = new Extra({});
            if (data.properties != null) {
                message.properties = data.properties.map(item => Extra.Property.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                properties?: ReturnType<typeof Extra.Property.prototype.toObject>[];
            } = {};
            if (this.properties != null) {
                data.properties = this.properties.map((item: Extra.Property) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.properties.length)
                writer.writeRepeatedMessage(3, this.properties, (item: Extra.Property) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extra {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Extra();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        reader.readMessage(message.properties, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Extra.Property.deserialize(reader), Extra.Property));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Extra {
            return Extra.deserialize(bytes);
        }
    }
    export namespace Extra {
        export enum PropertyKey {
            Field_0 = 0,
            Sign = 2,
            Thumb = 3,
            Extra = 4,
            Xml = 7
        }
        export class Property extends pb_1.Message {
            #one_of_decls: number[][] = [];
            constructor(data?: any[] | {
                type?: Extra.PropertyKey;
                value?: string;
            }) {
                super();
                pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
                if (!Array.isArray(data) && typeof data == "object") {
                    if ("type" in data && data.type != undefined) {
                        this.type = data.type;
                    }
                    if ("value" in data && data.value != undefined) {
                        this.value = data.value;
                    }
                }
            }
            get type() {
                return pb_1.Message.getFieldWithDefault(this, 1, Extra.PropertyKey.Field_0) as Extra.PropertyKey;
            }
            set type(value: Extra.PropertyKey) {
                pb_1.Message.setField(this, 1, value);
            }
            get value() {
                return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
            }
            set value(value: string) {
                pb_1.Message.setField(this, 2, value);
            }
            static fromObject(data: {
                type?: Extra.PropertyKey;
                value?: string;
            }): Property {
                const message = new Property({});
                if (data.type != null) {
                    message.type = data.type;
                }
                if (data.value != null) {
                    message.value = data.value;
                }
                return message;
            }
            toObject() {
                const data: {
                    type?: Extra.PropertyKey;
                    value?: string;
                } = {};
                if (this.type != null) {
                    data.type = this.type;
                }
                if (this.value != null) {
                    data.value = this.value;
                }
                return data;
            }
            serialize(): Uint8Array;
            serialize(w: pb_1.BinaryWriter): void;
            serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
                const writer = w || new pb_1.BinaryWriter();
                if (this.type != Extra.PropertyKey.Field_0)
                    writer.writeEnum(1, this.type);
                if (this.value.length)
                    writer.writeString(2, this.value);
                if (!w)
                    return writer.getResultBuffer();
            }
            static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Property {
                const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Property();
                while (reader.nextField()) {
                    if (reader.isEndGroup())
                        break;
                    switch (reader.getFieldNumber()) {
                        case 1:
                            message.type = reader.readEnum();
                            break;
                        case 2:
                            message.value = reader.readString();
                            break;
                        default: reader.skipField();
                    }
                }
                return message;
            }
            serializeBinary(): Uint8Array {
                return this.serialize();
            }
            static deserializeBinary(bytes: Uint8Array): Property {
                return Property.deserialize(bytes);
            }
        }
    }
}
